{"version":3,"sources":["todo_master/assets/tick_icon.png","todo_master/assets/red_tick.png","todo_master/assets/cut.png","todo_master/components/Todo.js","todo_master/actions/TodoAction.js","todo_master/TodoWidget.js","todo_master/app/App.js","serviceWorker.js","todo_master/reducer/Todo.js","reducers/index.js","index.js"],"names":["module","exports","Todo","props","className","onClick","e","toggleTodo","todo","id","src","completed","doneIcon","yesIcon","text","handleRemove","cutIcon","nextTodo","TodoWidget","removeTodo","handleInputChnage","setState","addTodoText","target","value","handleSubmit","addTodo","state","todos","elements","this","map","undefined","key","placeholder","onChange","Component","connect","dispatch","type","App","Boolean","window","location","hostname","match","action","filter","rootReducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.afd311ff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tick_icon.745d6171.png\";","module.exports = __webpack_public_path__ + \"static/media/red_tick.55a22606.png\";","module.exports = __webpack_public_path__ + \"static/media/cut.17dfc335.png\";","import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./Todo.css\";\r\nimport yesIcon from \"../assets/tick_icon.png\";\r\nimport doneIcon from \"../assets/red_tick.png\";\r\nimport cutIcon from \"../assets/cut.png\";\r\n\r\nexport default function Todo(props) {\r\n  return (\r\n    <div className=\"row todo\">\r\n      <div className=\"col-2\">\r\n        <button\r\n          className=\"btn toggle_button\"\r\n          onClick={(e) => props.toggleTodo(props.todo.id)}\r\n        >\r\n          {\" \"}\r\n          <img src={props.todo.completed ? doneIcon : yesIcon} />\r\n        </button>\r\n      </div>\r\n      <div className={`col-8 todo_text ${props.todo.completed ? \"done\" : \"\"}`}>\r\n        {props.todo.text}\r\n      </div>\r\n      <div className=\"col-2\">\r\n        <button onClick={(e) => props.handleRemove(props.todo.id)}>\r\n          {\" \"}\r\n          <img src={cutIcon} />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","\r\nlet nextTodo = 0;\r\nexport const addTodo = (text) => ({\r\n  type: \"ADD_TODO\",\r\n  id: nextTodo++,\r\n  text,\r\n});\r\n\r\nexport const removeTodo = (id) => ({\r\n  type: \"REMOVE_TODO\",\r\n  id: id,\r\n});\r\nexport const toggleTodo = (id) => ({\r\n  type: \"TOGGLE_TODO\",\r\n  id: id,\r\n});\r\n","import React, { Component } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Todo from \"./components/Todo\";\r\nimport { connect } from \"react-redux\";\r\nimport { addTodo, removeTodo, toggleTodo } from \"./actions/TodoAction\";\r\n\r\nclass TodoWidget extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      todos: [],\r\n      addTodoText: \"\",\r\n    };\r\n    this.state.handleSubmit = this.handleSubmit;\r\n    this.state.handleInputChnage = this.handleInputChnage;\r\n    this.state.handleRemove = this.handleRemove;\r\n    this.state.toggleTodo = this.toggleTodo;\r\n  }\r\n  toggleTodo = (id) => {\r\n    this.props.toggleTodo(id);\r\n  };\r\n  handleRemove = (id) => {\r\n    this.props.removeTodo(id);\r\n  };\r\n  handleInputChnage = (e) => {\r\n    this.setState({ addTodoText: e.target.value });\r\n  };\r\n  handleSubmit = (e) => {\r\n    this.props.addTodo(this.state.addTodoText);\r\n    this.setState({ addTodoText: \"\" });\r\n  };\r\n\r\n  \r\n  render() {\r\n    let elements = this.props.todos.map((todo) => {\r\n      return (\r\n        todo &&\r\n        todo.id != undefined && (\r\n          <Todo\r\n            key={todo.id}\r\n            toggleTodo={this.toggleTodo}\r\n            handleRemove={this.handleRemove}\r\n            todo={todo}\r\n          />\r\n        )\r\n      );\r\n    });\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"section_title\">\r\n          <h1>Todo List</h1>\r\n        </div>\r\n        <div className=\"todo_container\">{elements}</div>\r\n        <div className=\"row addTodo_Container\">\r\n          <div className=\"add_input col-8\">\r\n            <input\r\n              placeholder=\"add a new Todo\"\r\n              value={this.state.addTodoText}\r\n              onChange={this.handleInputChnage}\r\n            />\r\n          </div>\r\n          <button\r\n            className=\"col-4\"\r\n            onClick={this.handleSubmit}\r\n            className=\"btn btn-primary\"\r\n          >\r\n            Add Todo\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  todos: state.todos,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addTodo: (text) => dispatch(addTodo(text)),\r\n  removeTodo: (id) => dispatch(removeTodo(id)),\r\n  toggleTodo: (id) => dispatch(toggleTodo(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoWidget);\r\n","import React from 'react';\nimport TodoWidget from '../TodoWidget';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <TodoWidget />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const todos = (state = [], action) => {\r\n  switch (action.type) {\r\n    case \"ADD_TODO\":\r\n      return [\r\n        ...state,\r\n        {\r\n          id: action.id,\r\n          text: action.text,\r\n          completed: action.completed,\r\n        },\r\n      ];\r\n    case \"REMOVE_TODO\":\r\n      return [...state.filter((todo) => todo.id != action.id)];\r\n    case \"TOGGLE_TODO\":\r\n      return state.map((todo) =>\r\n        todo.id === action.id ? { ...todo, completed: !todo.completed } : todo\r\n      );\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default todos;\r\n","import { combineReducers ,createStore} from 'redux'\r\nimport todos from '../todo_master/reducer/Todo';\r\n\r\n\r\nconst rootReducer =  combineReducers({\r\n    todos\r\n})\r\n\r\nconst store = createStore(\r\n    rootReducer\r\n  );\r\n  export default store;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./todo_master/app/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport rootReducer from \"./reducers/index\";\nimport store from './reducers/index';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}